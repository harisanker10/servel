// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.20.3
// source: proto/users.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "users";

export enum AuthType {
  CREDENTIALS = "CREDENTIALS",
  GOOGLE = "GOOGLE",
  GITHUB = "GITHUB",
}

export interface User {
  id: string;
  email: string;
  password?: string | undefined;
  fullname?: string | undefined;
  avatar?: string | undefined;
  githubId?: string | undefined;
  isBlocked: boolean;
  createdAt: string;
  updatedAt: string;
  authType: string[];
  accessTokens?: AccessTokens | undefined;
}

export interface AccessTokens {
  accessToken: string;
  refreshToken: string;
  provider: string;
}

/**
 * message CreateUserWithGoogleDto {
 *   string email = 1;
 *   string avatar = 2;
 *   string fullname = 3;
 * }
 *
 * message CreateUserWithGithubDto {
 *   string email = 1;
 *   string avatar = 2;
 *   string fullname = 3;
 *   string githubId = 4;
 * }
 */
export interface CreateUserDto {
  email: string;
  password?: string | undefined;
  avatar?: string | undefined;
  fullname?: string | undefined;
  githubId?: string | undefined;
  authType: AuthType;
  accessTokens?: AccessTokens | undefined;
}

export interface QueryUserDto {
  email?: string | undefined;
  githubId?: string | undefined;
  isBlocked?: boolean | undefined;
  createdAt?: number | undefined;
  sort?: number | undefined;
}

export interface UpdateUserDto {
  id?: string | undefined;
  email?: string | undefined;
  updates: Updates | undefined;
}

export interface Updates {
  email?: string | undefined;
  password?: string | undefined;
  avatar?: string | undefined;
  githubId?: string | undefined;
  fullname?: string | undefined;
}

export interface FindOneUserDto {
  id?: string | undefined;
  email?: string | undefined;
  githubId?: string | undefined;
}

export interface Users {
  users: User[];
}

export interface PaginationDto {
  page: number;
  skip: number;
  query: QueryUserDto | undefined;
}

export interface Empty {
}

export const USERS_PACKAGE_NAME = "users";

export interface UserServiceClient {
  createUser(request: CreateUserDto): Observable<User>;

  findOneUser(request: FindOneUserDto): Observable<User>;

  findAllUsers(request: Empty): Observable<Users>;

  queryUsers(request: Observable<PaginationDto>): Observable<Users>;

  removeUser(request: FindOneUserDto): Observable<User>;

  updateUser(request: UpdateUserDto): Observable<User>;
}

export interface UserServiceController {
  createUser(request: CreateUserDto): Promise<User> | Observable<User> | User;

  findOneUser(request: FindOneUserDto): Promise<User> | Observable<User> | User;

  findAllUsers(request: Empty): Observable<Users>;

  queryUsers(request: Observable<PaginationDto>): Observable<Users>;

  removeUser(request: FindOneUserDto): Promise<User> | Observable<User> | User;

  updateUser(request: UpdateUserDto): Promise<User> | Observable<User> | User;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "findOneUser", "findAllUsers", "removeUser", "updateUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["queryUsers"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
