// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.3
// source: deployments.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { DeploymentType, InstanceType } from "..";

export const protobufPackage = "deployments";

export interface Deployment {
  id: string;
  createdAt: number;
  updatedAt: number;
  status: string;
  imageData?: ImageData | undefined;
  webServiceData?: WebServiceData | undefined;
  staticSiteData?: StaticSiteData | undefined;
}

export interface UserId {
  userId: string;
}

export interface Project {
  id: string;
  name: string;
  status: string;
  createdAt: number;
  updatedAt: number;
  deploymentUrl: string;
  type: DeploymentType;
  deployments: Deployment[];
}

export interface Projects {
  projects: Project[];
}

export interface ImageDeployments {
  imageDeployments: ImageData[];
}

export interface ImageData {
  imageUrl: string;
  instanceType: string;
  accessToken: string;
  env: { [key: string]: string };
  port: number;
}

export interface ImageData_EnvEntry {
  key: string;
  value: string;
}

export interface WebServiceData {
  repoUrl: string;
  instanceType: string;
  runCommand: string;
  buildCommand: string;
  accessToken: string;
  branch: string;
  commitId: string;
  env: { [key: string]: string };
  port: number;
}

export interface WebServiceData_EnvEntry {
  key: string;
  value: string;
}

export interface StaticSiteData {
  repoUrl: string;
  outDir: string;
  buildCommand: string;
  accessToken: string;
  branch: string;
  commitId: string;
  env: { [key: string]: string };
}

export interface StaticSiteData_EnvEntry {
  key: string;
  value: string;
}

export interface GetDeploymentByUserIdDto {
  userId: string;
}

export interface UpdateDeploymentDto {
  id: string;
  updates: Updates | undefined;
}

export interface Updates {
  repoName?: string | undefined;
  userId: string;
  imageData?: ImageData | undefined;
  webServiceData?: WebServiceData | undefined;
  staticSiteData?: StaticSiteData | undefined;
}

export interface CreateDeploymentDto {
  deploymentName?: string | undefined;
  userId: string;
  instanceType: InstanceType;
  deploymentType: DeploymentType;
  env: string;
  imageData?: ImageData | undefined;
  webServiceData?: WebServiceData | undefined;
  staticSiteData?: StaticSiteData | undefined;
}

export interface Deployments {
  deployments: Deployment[];
}

export interface GetDeploymentDto {
  id: string;
}

export const DEPLOYMENTS_PACKAGE_NAME = "deployments";

export interface DeploymentsServiceClient {
  getAllProjects(request: UserId): Observable<Project>;

  createDeployment(request: CreateDeploymentDto): Observable<Projects>;

  getDeployments(request: GetDeploymentDto): Observable<Deployments>;

  stopDeployment(request: GetDeploymentDto): Observable<Deployment>;

  deleteDeployment(request: GetDeploymentDto): Observable<Deployment>;

  retryDeployment(request: GetDeploymentDto): Observable<Deployment>;

  rollbackDeployment(request: GetDeploymentDto): Observable<Deployment>;

  updateAndRedeploy(request: UpdateDeploymentDto): Observable<Deployment>;
}

export interface DeploymentsServiceController {
  getAllProjects(
    request: UserId,
  ): Promise<Project> | Observable<Project> | Project;

  createDeployment(
    request: CreateDeploymentDto,
  ): Promise<Projects> | Observable<Projects> | Projects;

  getDeployments(
    request: GetDeploymentDto,
  ): Promise<Deployments> | Observable<Deployments> | Deployments;

  stopDeployment(
    request: GetDeploymentDto,
  ): Promise<Deployment> | Observable<Deployment> | Deployment;

  deleteDeployment(
    request: GetDeploymentDto,
  ): Promise<Deployment> | Observable<Deployment> | Deployment;

  retryDeployment(
    request: GetDeploymentDto,
  ): Promise<Deployment> | Observable<Deployment> | Deployment;

  rollbackDeployment(
    request: GetDeploymentDto,
  ): Promise<Deployment> | Observable<Deployment> | Deployment;

  updateAndRedeploy(
    request: UpdateDeploymentDto,
  ): Promise<Deployment> | Observable<Deployment> | Deployment;
}

export function DeploymentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getAllProjects",
      "createDeployment",
      "getDeployments",
      "stopDeployment",
      "deleteDeployment",
      "retryDeployment",
      "rollbackDeployment",
      "updateAndRedeploy",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcMethod("DeploymentsService", method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method,
      );
      GrpcStreamMethod("DeploymentsService", method)(
        constructor.prototype[method],
        method,
        descriptor,
      );
    }
  };
}

export const DEPLOYMENTS_SERVICE_NAME = "DeploymentsService";
