// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v5.27.3
// source: deployments.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "deployments";

export enum DeploymentType {
  webService = 0,
  staticSite = 1,
  dockerImage = 2,
  UNRECOGNIZED = -1,
}

export enum InstanceType {
  tier_0 = 0,
  tier_1 = 1,
  tier_2 = 2,
  UNRECOGNIZED = -1,
}

export interface Deployment {
  id: string;
  deploymentName: string;
  status: string;
  userId: string;
  createdAt: number;
  updatedAt: number;
  deploymentUrl: string;
  deploymentType: DeploymentType;
  imageData?: ImageData | undefined;
  webServiceData?: WebServiceData | undefined;
  staticSiteData?: StaticSiteData | undefined;
}

export interface ImageData {
  imageUrl: string;
  instanceType: string;
  accessToken: string;
}

export interface WebServiceData {
  repoUrl: string;
  instanceType: string;
  runCommand: string;
  buildCommand: string;
  accessToken: string;
}

export interface StaticSiteData {
  repoUrl: string;
  outDir: string;
  buildCommand: string;
  accessToken: string;
}

export interface GetDeploymentByUserIdDto {
  userId: string;
}

export interface UpdateDeploymentDto {
  id: string;
  updates: Updates | undefined;
}

export interface Updates {
  repoName: string;
  outDir: string;
  runCommand: string;
  buildCommand: string;
  instanceType: string;
}

export interface CreateDeploymentDto {
  deploymentName?: string | undefined;
  userId: string;
  deploymentType: DeploymentType;
  imageData?: ImageData | undefined;
  webServiceData?: WebServiceData | undefined;
  staticSiteData?: StaticSiteData | undefined;
}

export interface Deployments {
  deployments: Deployment[];
}

export interface GetDeploymentDto {
  id: string;
}

export const DEPLOYMENTS_PACKAGE_NAME = "deployments";

export interface DeploymentsServiceClient {
  createDeployment(request: CreateDeploymentDto): Observable<Deployment>;

  getDeployment(request: GetDeploymentDto): Observable<Deployment>;

  getDeploymentsByUserId(request: GetDeploymentByUserIdDto): Observable<Deployments>;

  stopDeployment(request: GetDeploymentDto): Observable<Deployment>;

  deleteDeployment(request: GetDeploymentDto): Observable<Deployment>;

  retryDeployment(request: GetDeploymentDto): Observable<Deployment>;

  rollbackDeployment(request: GetDeploymentDto): Observable<Deployment>;

  updateDeployment(request: UpdateDeploymentDto): Observable<Deployment>;
}

export interface DeploymentsServiceController {
  createDeployment(request: CreateDeploymentDto): Promise<Deployment> | Observable<Deployment> | Deployment;

  getDeployment(request: GetDeploymentDto): Promise<Deployment> | Observable<Deployment> | Deployment;

  getDeploymentsByUserId(
    request: GetDeploymentByUserIdDto,
  ): Promise<Deployments> | Observable<Deployments> | Deployments;

  stopDeployment(request: GetDeploymentDto): Promise<Deployment> | Observable<Deployment> | Deployment;

  deleteDeployment(request: GetDeploymentDto): Promise<Deployment> | Observable<Deployment> | Deployment;

  retryDeployment(request: GetDeploymentDto): Promise<Deployment> | Observable<Deployment> | Deployment;

  rollbackDeployment(request: GetDeploymentDto): Promise<Deployment> | Observable<Deployment> | Deployment;

  updateDeployment(request: UpdateDeploymentDto): Promise<Deployment> | Observable<Deployment> | Deployment;
}

export function DeploymentsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createDeployment",
      "getDeployment",
      "getDeploymentsByUserId",
      "stopDeployment",
      "deleteDeployment",
      "retryDeployment",
      "rollbackDeployment",
      "updateDeployment",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DeploymentsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DeploymentsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DEPLOYMENTS_SERVICE_NAME = "DeploymentsService";
