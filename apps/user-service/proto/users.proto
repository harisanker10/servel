syntax = "proto3";

package users;

message User {
  string id = 1;
  string email = 2;
  optional string password = 3;
  optional string fullname = 4;
  optional string avatar = 5;
  optional string githubId = 6;
  bool isBlocked = 7;
  string createdAt = 9;
  string updatedAt = 10;
  repeated string authType = 11;
  optional AccessToken accessTokens = 12;
}

message AccessToken {
  string accessToken = 1;
  string refreshToken = 2;
  string provider = 3;
}

service UserService {
  rpc CreateUser(CreateUserDto) returns (User) {}

  rpc FindOneUser(FindOneUserDto) returns (User) {}
  rpc FindAllUsers(Empty) returns (stream Users) {}
  rpc QueryUsers(stream PaginationDto) returns (stream Users) {}

  rpc GetAccessTokens(FindOneUserDto) returns (AccessTokens) {}

  rpc RemoveUser(FindOneUserDto) returns (User) {}

  rpc UpdateUser(UpdateUserDto) returns (User) {}
}

// message CreateUserWithGoogleDto {
//   string email = 1;
//   string avatar = 2;
//   string fullname = 3;
// }
//
// message CreateUserWithGithubDto {
//   string email = 1;
//   string avatar = 2;
//   string fullname = 3;
//   string githubId = 4;
// }
//
message CreateUserDto {
  string email = 1;
  optional string password = 2;
  optional string avatar = 3;
  optional string fullname = 4;
  optional string githubId = 5;
  AuthType authType = 6;
  optional AccessToken accessToken = 7;
}

message QueryUserDto {
  optional string email = 1;
  optional string githubId = 2;
  optional bool isBlocked = 3;
  optional int32 createdAt = 5;
  optional int32 sort = 6;
}
message UpdateUserDto {
  optional string id = 1;
  optional string email = 2;
  Updates updates = 3;
}

message Updates {
  optional string email = 1;
  optional string password = 2;
  optional string avatar = 3;
  optional string githubId = 4;
  optional string fullname = 5;
}

message FindOneUserDto {
  optional string id = 1;
  optional string email = 2;
  optional string githubId = 3;
}

message Users { repeated User users = 1; }

message AccessTokens {
  repeated AccessToken accessToken = 1;
}

message PaginationDto {
  int32 page = 1;
  int32 skip = 2;
  QueryUserDto query = 3;
}

enum AuthType {
  CREDENTIALS = 0;
  GOOGLE = 1;
  GITHUB = 2;
}

message Empty {}
